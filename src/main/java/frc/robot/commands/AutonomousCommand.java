// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.classes.TargetPosition2D;
import frc.robot.classes.SmoothControl;
import frc.robot.subsystems.Drivetrain;
import static frc.robot.Constants.DrivetrainConstants.*;

import java.util.*;

import static frc.robot.Constants.AutonomousCommandConstants.*;
import frc.robot.classes.Kinematics;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class AutonomousCommand extends CommandBase 
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private boolean m_isDone = false;
    private Kinematics m_kinematics;
    private SmoothControl m_smoothControl;
    private Drivetrain m_drivetrain;

    private List<TargetPosition2D> m_targetPath;
    private ListIterator<TargetPosition2D> m_targetPathIterator;
    private TargetPosition2D m_targetPose;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    public AutonomousCommand(Drivetrain drivetrain, Kinematics kinematics) 
    {
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_drivetrain = drivetrain;
        m_kinematics = kinematics;
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() 
    {
        m_targetPath = new ArrayList<TargetPosition2D>();

        m_targetPath.add(new TargetPosition2D(3.0, 0.0, Math.toRadians(0.0), 0.5d));
        m_targetPath.add(new TargetPosition2D(3.0, 3.0, Math.toRadians(180.0), 0.5d));
        m_targetPath.add(new TargetPosition2D(0.0, 3.0, Math.toRadians(270.0), 0.5d));
        m_targetPath.add(new TargetPosition2D(0.0, 0.0, Math.toRadians(0), 0.5d));

        m_targetPathIterator = m_targetPath.listIterator();

        //For testing!
        //Robot Pos: [0, 0, 0]; target pos: [3, 3, 90], Vel: 4 gives: Range: 4.2426, w_des: 1.4176
        //Robot Pos: [0, 0, 0]; target pos: [3, 3, -90]; Vel: -4 gives: Range: 4.2426, w_des: 6.2974
        m_smoothControl = new SmoothControl();
        m_smoothControl.reset();
    }
    
    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() 
    {
        boolean calculateNextMove = true;
        double vR = 0.0;
        double vL = 0.0;

        //Have we reached the target?
        if(m_smoothControl.getRange() <= TARGET_WITHIN_RANGE_FEET)
        {
            //Check if there is another pose to move to
            if(m_targetPathIterator.hasNext())
            {
                //Get the next pose
                m_targetPose = m_targetPathIterator.next();
            }
            else
            {
                //No more poses to move to
                m_drivetrain.stop();        //Stop all motors
                calculateNextMove = false;  //No need to calculate the next move
                m_isDone = true;            //Alert robot that autonomous mode is complete and should end
            }
        }

        if(calculateNextMove)
        {
            //Compute turn rate and update range
            m_smoothControl.computeTurnRate(m_kinematics.getPose(), m_targetPose, m_targetPose.getVelocity());

            //Calculate vR in feet per second
            vR = m_targetPose.getVelocity() + (TRACK_WIDTH_FEET/2)*m_smoothControl.getTurnRateRadians();
            //Calculate vL in feet per second
            vL = m_targetPose.getVelocity() - (TRACK_WIDTH_FEET/2)*m_smoothControl.getTurnRateRadians();

            //Converting ft/s equation output to controller velocity
            vR = Drivetrain.feetPerSecToControllerVelocity(vR);
            vL = Drivetrain.feetPerSecToControllerVelocity(vL);

            //Send vR and vL to velocity drive, units are in controller velocity
            m_drivetrain.velocityDrive(vL, vR);
        }
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) 
    {
        m_drivetrain.stop();
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() 
    {
        return m_isDone;
    }

    @Override
    public boolean runsWhenDisabled() 
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
