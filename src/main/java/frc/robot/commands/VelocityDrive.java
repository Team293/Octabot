// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj.Joystick;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.Drivetrain;
import static frc.robot.Constants.DrivetrainConstants.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class VelocityDrive extends CommandBase 
{
    private final Joystick m_rightJoy;
    private final Joystick m_leftJoy;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private final Drivetrain m_drivetrain;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    

    public VelocityDrive(Drivetrain subsystem, Joystick rightJoystick, Joystick leftJoystick) 
    {
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_drivetrain = subsystem;
        m_leftJoy = leftJoystick;
        m_rightJoy = rightJoystick;
        addRequirements(m_drivetrain);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() 
    {
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() 
    {
        double leftY;
        double rightY;

        //Get joystick input
        leftY = m_leftJoy.getY();
        rightY = m_rightJoy.getY();

        //Clamp input
        leftY = clampInput(leftY, false);
        rightY = clampInput(rightY, true);

        //Use Slowdown modifier?
        if(m_leftJoy.getTrigger() || m_rightJoy.getTrigger())
        {
            leftY *= VELOCITY_SLOWDOWN_MODIFIER;
            rightY *= VELOCITY_SLOWDOWN_MODIFIER;
        }
        
        //Should be reversed?
        if (m_leftJoy.getThrottle() < 0)
        {
            leftY = -leftY;
            rightY = -rightY;
        }

        //Send throttle data to velocity drive
        m_drivetrain.velocityDrive(leftY, rightY);
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) 
    {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() 
    {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() 
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }

    /* Calculates the motor power to use based on a given deadband and 
    *  joystick input from -1 to 1
    *  Prevents spikes in motor power by calculating the line to use 
    *  where 0 is the deadband and 1 is the max */
    public double clampInput(double input, boolean isRight)
    {
        double retval = 0.0;
        double deadband = 0;
        if(isRight){
            deadband = R_DEADBAND;
        }
        else{
            deadband = L_DEADBAND;
        }
        //input must be between -1 and 1
        if((input < -1) || (input > 1))
        { 
            retval = INVALID_INPUT;
        }
        //Check if input is inside the deadband
        else if(Math.abs(input) <= deadband) 
        { 
            retval = 0.0;
        } 
        //Input is valid and NOT in the deadband
        else 
        { 
            retval = (Math.abs(input) - deadband)/(1 - deadband);
            if(input < 0) 
            { 
                //Input is negative
                retval = -1 * retval;
            } 
        }
        
        return retval;
    }
}
