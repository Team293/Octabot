// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;
import frc.robot.Robot;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import java.util.ResourceBundle.Control;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.InvertType;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
import com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;
import edu.wpi.first.wpilibj.Joystick;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.I2C.Port;
import com.ctre.phoenix.sensors.PigeonIMU;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Drivetrain extends Subsystem 
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    //Motor constants
    private final double CLOSED_LOOP_RAMP = 0.5;
    private final double MAX_VELOCITY = 21549;
    private final double VELOCITY_LIMIT_PERCENTAGE = 0.5;
    private final double VELOCITY_SLOWDOWN_MODIFIER = 0.5;
    private final double INVALID_INPUT = -99;
    private final double L_DEADBAND = .15;
    private final double R_DEADBAND = .15;

    //PID configuration constants
    private final int PID_SLOT_ID = 0;
    private final int ENCODER_CONFIG_TIMEOUT_MS = 4000;
    private final int PID_CONFIG_TIMEOUT_MS = 10;
    private final double KF = 0.04759;
    private final double KP = 0.01461;
    private final double KI = 0.0;
    private final double KD = 0.0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX leftTalonLead;
    private WPI_TalonSRX rightTalonLead;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private AHRS navX;

    public Drivetrain()
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftTalonLead = new WPI_TalonSRX(1);       
        rightTalonLead = new WPI_TalonSRX(2);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        //Clear sticky faults
        leftTalonLead.clearStickyFaults();
        rightTalonLead.clearStickyFaults();

        //Set facotry defaults for onboard PID
        leftTalonLead.configFactoryDefault();
        rightTalonLead.configFactoryDefault();
        
        //Set motors to inverted if needed
        leftTalonLead.setInverted(true);
        rightTalonLead.setInverted(false);

        //Set encoder
        leftTalonLead.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, PID_SLOT_ID, ENCODER_CONFIG_TIMEOUT_MS);
        rightTalonLead.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, PID_SLOT_ID, ENCODER_CONFIG_TIMEOUT_MS);

        //Configure PID
        leftTalonLead.config_kF(PID_SLOT_ID, KF, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.config_kP(PID_SLOT_ID, KP, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.config_kI(PID_SLOT_ID, KI, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.config_kD(PID_SLOT_ID, KD, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.configClosedloopRamp(CLOSED_LOOP_RAMP);
        leftTalonLead.configNeutralDeadband(L_DEADBAND);
        leftTalonLead.setNeutralMode(NeutralMode.Coast);

        rightTalonLead.config_kF(PID_SLOT_ID, KF, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.config_kP(PID_SLOT_ID, KP, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.config_kI(PID_SLOT_ID, KI, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.config_kD(PID_SLOT_ID, KD, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.configClosedloopRamp(CLOSED_LOOP_RAMP);
        rightTalonLead.configNeutralDeadband(R_DEADBAND);
        rightTalonLead.setNeutralMode(NeutralMode.Coast);

        navX = new AHRS(Port.kMXP); 
    }

    @Override
    public void initDefaultCommand()
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        setDefaultCommand(new DumbDrive());
    }

    @Override
    public void periodic()
    {
        // Put code here to be run every loop
        SmartDashboard.putNumber("Left Encoder Velocity", leftTalonLead.getSensorCollection().getQuadratureVelocity());
        SmartDashboard.putNumber("Left Encoder Position", leftTalonLead.getSensorCollection().getQuadraturePosition());
        SmartDashboard.putNumber("Right Encoder Velocity", rightTalonLead.getSensorCollection().getQuadratureVelocity());
        SmartDashboard.putNumber("Right Encoder Position", rightTalonLead.getSensorCollection().getQuadraturePosition());
        SmartDashboard.putNumber("NavX Heading", navX.getAngle());
        SmartDashboard.putNumber("NavX Heading", navX.getFusedHeading());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem here. Call these from Commands.

    // Converts joystick input adjusted for deadband to current for the motor
    public void dumbDrive(double leftPos, double rightPos) 
    {
        double leftMotorPower = 0.0;
        double rightMotorPower = 0.0;

        // Running at half speed as to not kill people
        leftMotorPower = calcMotorPower(leftPos, L_DEADBAND);
        rightMotorPower = calcMotorPower(rightPos, R_DEADBAND);

        if((INVALID_INPUT == leftMotorPower) || (INVALID_INPUT == rightMotorPower))
        {
            System.out.println("Invalid motor input! Left motor: " + leftPos + "Right motor: " + rightPos);
            //Motor power is invalid! Stop all motors
            stop();
        }
        else
        {
            //Both left and right motor power is valid, set motor power
            leftTalonLead.set(ControlMode.PercentOutput, leftMotorPower * VELOCITY_LIMIT_PERCENTAGE);
            rightTalonLead.set(ControlMode.PercentOutput, rightMotorPower * VELOCITY_LIMIT_PERCENTAGE);
        }
    }

    // Converts joystick input adjusted to a RPM for the Falcon's PIDF loop to aim for
    public void velocityDrive(double leftPos, double rightPos, boolean useSlowModifier, boolean useReverse)
    {
        double leftMotorPower = 0.0;
        double rightMotorPower = 0.0;
        
        //Reverse motor positions if needed
        if(useReverse)
        {     
            double temp = leftPos;
            leftPos = -rightPos;
            rightPos = -temp;
        }

        //Calculate Motor Power
        leftMotorPower = calcMotorPower(leftPos, L_DEADBAND);
        rightMotorPower = calcMotorPower(rightPos, R_DEADBAND);
        
        // Checking if motor values are valid
        if ((INVALID_INPUT == leftMotorPower) || (INVALID_INPUT == rightMotorPower))
        {
            System.out.println("Invalid motor input! Left motor: " + leftPos + "Right motor: " + rightPos);
            //Motor power is invalid! Stop all motors
            stop();
        }
        else
        {
            //Both left and right motor power is valid, set motor power
            leftMotorPower = leftMotorPower * MAX_VELOCITY * VELOCITY_LIMIT_PERCENTAGE;
            rightMotorPower = rightMotorPower * MAX_VELOCITY * VELOCITY_LIMIT_PERCENTAGE;

            if(useSlowModifier)
            {
                leftMotorPower = leftMotorPower * VELOCITY_SLOWDOWN_MODIFIER;
                rightMotorPower = rightMotorPower * VELOCITY_SLOWDOWN_MODIFIER;
            }

            //Set motor power
            leftTalonLead.set(ControlMode.Velocity, leftMotorPower);
            rightTalonLead.set(ControlMode.Velocity, rightMotorPower);
        }
    }

    // Stops motor usually used after the drive command ends to prevent shenanigans
    public void stop()
    {
        leftTalonLead.set(ControlMode.Current, 0);
        rightTalonLead.set(ControlMode.Current, 0);
    }

    /* Calculates the motor power to use based on a given deadband and 
    *  joystick input from -1 to 1
    *  Prevents spikes in motor power by calculating the line to use 
    *  where 0 is the deadband and 1 is the max */
    public double calcMotorPower(double input, double deadband)
    {
        double retval = 0.0;

        //input must be between -1 and 1
        if((input < -1) || (input > 1))
        { 
            retval = INVALID_INPUT;
        }
        //Check if input is inside the deadband
        else if(Math.abs(input) <= deadband) 
        { 
            retval = 0.0;
        } 
        //Input is valid and NOT in the deadband
        else 
        { 
            retval = (Math.abs(input) - deadband)/(1 - deadband);
            if(input < 0) 
            { 
                //Input is negative
                retval = -1 * retval;
            } 
        }
        
        return retval;
    }

    //Velocity Drive without Deadband for vision purposes
    public void visionDrive(double leftPos, double rightPos)
    {
        if (leftPos > 1 || leftPos < -1 || rightPos > 1 || rightPos < -1)
        {
            //Position is invalid!
            System.out.println("Invalid motor input! Left motor: " + leftPos + "Right motor: " + rightPos);
            //Stop all motors
            stop();
        } 
        //Position is valid, set motors
        else 
        {
            leftTalonLead.set(ControlMode.Velocity,(leftPos * MAX_VELOCITY));
            rightTalonLead.set(ControlMode.Velocity,(rightPos * MAX_VELOCITY));
        }
    }
}
