// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.SubsystemBase;
import static frc.robot.Constants.DrivetrainConstants.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.SPI;
import frc.robot.classes.Kinematics;
import frc.robot.classes.Position2D;
import frc.robot.classes.SPIKE293Utils;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Drivetrain extends SubsystemBase 
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX leftTalonLead;
    private WPI_TalonSRX rightTalonLead;

    private AHRS navX;
    private Kinematics m_kinematics;
    
    public Drivetrain(Kinematics kinematics) 
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftTalonLead = new WPI_TalonSRX(1);
        rightTalonLead = new WPI_TalonSRX(2);
        
        //Reset and calibrate the gyro
        navX = new AHRS(SPI.Port.kMXP);

        setupGyro(navX, 0.0d);
        //enableEncoders();
        zeroDriveTrainEncoders();

        //Clearing sticky faults
        leftTalonLead.clearStickyFaults();
        leftTalonLead.clearStickyFaults();

        //Setting factory default settings to motors
        leftTalonLead.configFactoryDefault();
        rightTalonLead.configFactoryDefault();
    
        //Set motors to inverted if needed
        leftTalonLead.setInverted(false);
        rightTalonLead.setInverted(true);

        //Set encoder
        leftTalonLead.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, PID_SLOT_ID, ENCODER_CONFIG_TIMEOUT_MS);
        rightTalonLead.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, PID_SLOT_ID, ENCODER_CONFIG_TIMEOUT_MS);
        leftTalonLead.setSensorPhase(true);
        rightTalonLead.setSensorPhase(true);
        
        //Configure PID
        leftTalonLead.config_kF(PID_SLOT_ID, KF, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.config_kP(PID_SLOT_ID, KP, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.config_kI(PID_SLOT_ID, KI, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.config_kD(PID_SLOT_ID, KD, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.configClosedloopRamp(CLOSED_LOOP_RAMP);
        leftTalonLead.configNeutralDeadband(L_DEADBAND);
        leftTalonLead.setNeutralMode(NeutralMode.Coast);

        rightTalonLead.config_kF(PID_SLOT_ID, KF, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.config_kP(PID_SLOT_ID, KP, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.config_kI(PID_SLOT_ID, KI, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.config_kD(PID_SLOT_ID, KD, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.configClosedloopRamp(CLOSED_LOOP_RAMP);
        rightTalonLead.configNeutralDeadband(R_DEADBAND);
        rightTalonLead.setNeutralMode(NeutralMode.Coast);

        //Setup Kinematics. Kinematics is setup in robotcontainer
        m_kinematics = kinematics;
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }


    @Override
    public void periodic() 
    {
        // Put code here to be run every loop
        //Run Kinematics
        if(USE_NAVX_HEADING)
        {
            //use the NAVX for heading
            double headingInRadians = Math.toRadians(getGyroHeadingDegrees());
            m_kinematics.calculatePosition(getLeftEncoderPosition(), getRightEncoderPosition(), headingInRadians);
        }
        else
        {
            //Use the encoder information for heading
            m_kinematics.calculatePosition(getLeftEncoderPosition(), getRightEncoderPosition());
        }
        
        //Get current pose from Kinematics
        Position2D currentPose = m_kinematics.getPose();

        //Push robot info to Dashboard
        SmartDashboard.putNumber("Kinematics X (Feet)", currentPose.getX());
        SmartDashboard.putNumber("Kinematics Y (Feet)", currentPose.getY());
        SmartDashboard.putNumber("Kinematics Heading (degrees)", currentPose.getHeadingDegrees());

        SmartDashboard.putNumber("Left Encoder Velocity (Ft/S)", getLeftEncoderVelocity());
        SmartDashboard.putNumber("Left Encoder Position (Ft)", getLeftEncoderPosition());
        SmartDashboard.putNumber("Right Encoder Velocity (Ft/S)", getRightEncoderVelocity());
        SmartDashboard.putNumber("Right Encoder Position (Ft)", getRightEncoderPosition());

        SmartDashboard.putNumber("Robot Heading (degrees)", getGyroHeadingDegrees());
        SmartDashboard.putNumber("NavX X Accel", navX.getWorldLinearAccelX());
        SmartDashboard.putNumber("NavX Y Accel", navX.getWorldLinearAccelY());
        SmartDashboard.putNumber("NavX Z Accel", navX.getWorldLinearAccelZ());
        SmartDashboard.putNumber("NavX Yaw", navX.getYaw());
        SmartDashboard.putNumber("NavX Angle", navX.getAngle());
        SmartDashboard.putNumber("NavX Fused Heading", navX.getFusedHeading());
    }
    
    //Sets the motors to run at a given percentage output, does NOT use onboard PID
    public void percentDrive(double leftPercentage, double rightPercentage) 
    {
        SmartDashboard.putNumber("Percentage Left", leftPercentage);
        SmartDashboard.putNumber("Percentage Right", rightPercentage);
        leftTalonLead.set(ControlMode.PercentOutput, leftPercentage);
        rightTalonLead.set(ControlMode.PercentOutput, rightPercentage);
    }


    //Sets the motors to encoder units per desisec (100ms), uses the onboard motor PID
    public void velocityDrive(double vL, double vR)
    {
        SmartDashboard.putNumber("Desired Velocity Left (Encoder units/100ms)", vL);
        SmartDashboard.putNumber("Desired Velocity Right (Encoder units/100ms)", vR);
        leftTalonLead.set(ControlMode.Velocity, vL);
        rightTalonLead.set(ControlMode.Velocity, vR);
    }

    // Stops motor usually used after the drive command ends to prevent shenanigans
    public void stop() 
    {
        leftTalonLead.set(ControlMode.Current, 0);
        rightTalonLead.set(ControlMode.Current, 0);
    }

    public void initAutonomous(Position2D startingPose)
    {
        //reset encoders
        zeroDriveTrainEncoders();

        m_kinematics.setPose(startingPose);
        //Reset Gyro
        setupGyro(navX, startingPose.getHeadingDegrees());
    }

    /**   
     * returns left encoder position
     * 
     * @return left encoder position
     */
    public double getLeftEncoderPosition() 
    {
        // Returns the number of steps, multiply by edges per step to get EPR, divided by the gearbox ratio
        return SPIKE293Utils.controllerUnitsToFeet(leftTalonLead.getSelectedSensorPosition(0));
    }
    
    /**
     * returns right encoder position
     * 
     * @return right encoder position
     */
    public double getRightEncoderPosition() 
    {
        // Returns the number of steps, multiply by edges per step to get EPR, divided by the gearbox ratio
        return SPIKE293Utils.controllerUnitsToFeet(rightTalonLead.getSelectedSensorPosition(0));    
    }

    /**
     * returns left encoder Velocity in ft/s
     * 
     * @return left encoder Velocity in ft/s
     */
    public double getLeftEncoderVelocity()
    {
        // Returns the velocity of encoder by claculating the velocity from encoder units of click/100ms to ft/s
        return SPIKE293Utils.controllerVelocityToFeetPerSec(leftTalonLead.getSelectedSensorVelocity(0));
    }

    /**
     * returns right encoder Velocity in ft/s
     * 
     * @return right encoder Velocity in ft/s
     */
    public double getRightEncoderVelocity()
    {
        // Returns the velocity of encoder by claculating the velocity from encoder units of click/100ms to ft/s
        return SPIKE293Utils.controllerVelocityToFeetPerSec(rightTalonLead.getSelectedSensorVelocity(0));
    }

    /**
     * returns robot Velocity in ft/s
     * 
     * @return robot Velocity in ft/s
     */
    public double getRobotVelocity()
    {
        // Returns the velocity of the robot by taking the averga of the velcity on both sides of the robor
        return (getLeftEncoderVelocity() + getRightEncoderVelocity()) / 2.0d;
    }
    private void zeroDriveTrainEncoders() 
    {
        leftTalonLead.setSelectedSensorPosition(0);
        rightTalonLead.setSelectedSensorPosition(0);
    }
      
    public double getGyroHeadingDegrees() 
    {
        return (navX.getAngle() * -1.0d);
    }
    
    public void setupGyro(AHRS gyro, double startingAngleDegrees)
    {
        System.out.println("Calibrating gyroscope.");
        gyro.enableBoardlevelYawReset(true);
        gyro.reset();
        gyro.calibrate();

        //Wait for gyro to calibrate ~1 - 10 seconds
        while (gyro.isCalibrating())
        {
        }
        
        //Set's the starting angle to the given angle
        gyro.setAngleAdjustment(startingAngleDegrees);
        
        System.out.println("Calibrating gyroscope done.");
    }
}
